<h1>Purchases</h1>

<div id="app">

<div>
  <button type="button" v-on:click="open_unordered_form" class="btn btn-primary">New Purchase</button>
</div>

<span>
  <span class="menu" v-bind:class="{ menu_selected: filter_by_type == 'is_not_ordered'}" v-on:click="filter_order_ins('is_not_ordered')">New (No order date)</span>
  <span class="menu" v-bind:class="{ menu_selected: filter_by_type == 'is_ordered_not_received'}" v-on:click="filter_order_ins('is_ordered_not_received')">Ordered (not complete)</span>
  <span class="menu" v-bind:class="{ menu_selected: filter_by_type == 'is_received'}" v-on:click="filter_order_ins('is_received')">Goods Received</span>
</span>

<span>
Modified in last   
<select v-model="num_days" v-on:change="num_days_changed">
      <option value="7">7</option>
      <option value="14">14</option>
      <option value="30">30</option>
      <option value="90">90</option>
      <option value="365">365</option>
      <option value="100000">ALL</option>
</select>
days.
</span>
<span>
Sort by:   
<select v-model="sort_by_field">
      <option value="updated_at">Most recently changed or added</option>
      <option value="placed_date">Date Order Placed</option>
</select>
</span>


<!-- Edit Unordered Order In Form -->
<div id="unordered_form" class="modal fade bd-example-modal-lg" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-body">
        <h1>Purchase Details</h1>
        <table>
            <tr>
              <td>Order from</td>
              <td v-if="order_in.supplier_name">{{ order_in.supplier_name}} </td>
              <td v-else>
                  <select v-model="order_in.supplier_id">
                      <option v-for="(supplier, index) in suppliers" v-bind:value="supplier.id">{{supplier.name}}</option>
                  </select>
              </td>
            </tr>
            <tr>
              <td>Order Number</td>
              <td v-if="order_in.order_number">{{order_in.order_number}}</td>
              <td v-else>Save to allocate</td>
            </tr>
            <tr>
                <td>Account</td>
                <td>
                    <select v-model="order_in.account_id">
                      <option v-for="(account, index) in accounts" v-bind:value="account.id">{{account.name}}</option>
                    </select>
                </td>
            </tr>
            <tr>
                <td>Currency</td>
                <td>
                    <select v-model="order_in.currency">
                        <option>GBP</option>
                        <option>USD</option>
                        <option>EUR</option>
                    </select>
                </td>
            </tr>
            <tr>
                <td>Ordered Date</td>
                <td><input v-model="order_in.placed_date" type="date" value="" class="form-control" placeholder="Date the order was placed"/></td>
            </tr>
            <tr>    
                <td>Paid Date</td>
                <td><input v-model="order_in.date_payment_made" type="date" value="" class="form-control" placeholder="Date the order was placed"/></td>
            </tr>
            <tr v-if="this.order_in.currency != 'GBP'">
                <td>Exchange rate (E.g. 1.3)</td>
                <td><input v-model="order_in.exch_rate" type="text" value="" class="form-control" placeholder=""/></td>
            </tr>
            <tr>
                <td>Invoice Goods Amount</td>
                <td><input v-model="order_in.invoice_goods_ammout" type="text" value="" class="form-control" placeholder=""/></td>
            </tr>
            <tr>
                <td>Invoice VAT Amount</td>
                <td><input v-model="order_in.invoice_vat_ammout" type="text" value="" class="form-control" placeholder=""/></td>
            <tr>
                <td>Shipping Amount</td>
                <td><input v-model="order_in.shipping" type="text" value="" class="form-control" placeholder=""/></td>
            </tr>
            <tr>
                <td>Invoice Total Amount</td>
                <td><input v-model="order_in.invoice_total_ammount" type="text" value="" class="form-control" placeholder=""/></td>
            </tr>
            <tr>
                <td v-if="order_in.id && order_in.id > 0"><span v-on:click="open_capture_invoice()" class="badge badge-success">View/Add Invoice PDF</span></td>
                <td colspan="2"v-else><span class="warning">You can't upload an invoice until you have saved this order.</span></td>
            </tr>
            <tr v-if="this.order_in.currency != 'GBP'">
                <td>Amount actually paid in Â£</td>
                <td><input v-model="order_in.actually_paid_gbp" type="text" value="" class="form-control" placeholder=""/></td>
            </tr>
            <tr>
              <td>Is a Service (and so NOY in box 9)</td>
              <td><input v-model="order_in.is_service" type="checkbox" value="" class="form-control" placeholder=""/></td>
            </tr>
            <tr>
                <td>VAT Information Collected (N/A, Y, N)</td>
                <td><input v-model="order_in.vat_info_collected" type="text" value="" class="form-control" placeholder=""/></td>
            </tr>
            <tr>
                <td colspan="2"><textarea v-model="order_in.notes" rows="3" class="form-control" placeholder="Notes about this order go here"></textarea></td>
            </tr>
            <tr><td><button type="button" :disabled="! this.order_in.supplier_id || !this.order_in.account_id" v-on:click="save_order_in('#unordered_form')" class="btn btn-primary">Save</button>
              <button type="button" :disabled="! this.order_in.supplier_id || !this.order_in.account_id" v-on:click="save_and_next('#unordered_form')" class="btn btn-primary">Save & Next</button>
              <button type="button" v-on:click="cancel('#unordered_form')" class="btn btn-info">Cancel</button></td>
            </tr>
        </table>
      </div>
    </div>
  </div>
</div>

<!-- Edit Line Items Form -->
<div id="line_items_form" class="modal fade bd-example-modal-lg" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-body">
        <h1>Goods In Line Items</h1>
        <table>
            <tr>
                <td>Order from</td>
                <td>{{ order_in.supplier_name}} </td>
                <td>Order Number</td>
                <td>{{order_in.order_number}}</td>
            </tr>
            <tr>
        </table>
        <h1>Line Items</h1>
        <table>
            <tr v-if="order_in.order_in_lines.length > 0">
              <th>Item</th>
              <th>Ordered</th>
              <th>Received</th>
              <th>Kg</th>
              <th>Unit</th>
              <th>Total</th>
            </tr>
            <tr v-for="(li, index) in order_in.order_in_lines">
                <td v-if="is_part()">{{li.part_name}}</td>
                <td v-if="! is_part()">{{li.description}}</td>
                <td>{{li.qty}}</td>
                <td>{{li.qty_in}}</td>
                <td v-if="is_part() && li.part_weight_g">{{li.part_weight_g * li.qty / 1000.0}}</td>
                <td v-if="is_part() && li.part_id > 0 && !li.part_weight_g"><span v-on:click="open_in_new_tab('/parts/' + li.part_id + '/edit')">Set</span></td>
                <td v-else>?</td>
                <td>{{li.price.to_currency(order_in.currency)}}</td>
                <td>{{(li.price * li.qty).to_currency(order_in.currency)}}</td>
                <td><span v-on:click="edit_line_in(index)" class="badge badge-success">Edit</span>
                  
                  <span v-if="li.part" v-on:click="update_part_price(index)" class="badge badge-success">Update Part Price</span>
                  <span v-if="li.qty > li.qty_in && li.part" v-on:click="add_to_stock(index)" class="badge badge-success">Add to Stock</span>
                  <span v-if="li.qty > li.qty_in && ! li.part" v-on:click="save_non_part_received(index)" class="badge badge-success">Mark Received</span>
                  <span v-on:click="delete_line_item(index)" class="badge badge-danger">X</span>
                </td>
            </tr>
        </table>
        
        <table>
            <tr><td><button v-on:click="add_line_in" class="btn btn-primary">Add Line Item</button></td>
            <tr><td><button type="button" v-on:click="cancel('#line_items_form')" class="btn btn-info">Close</button></td></tr>
        </table>
      </div>
    </div>
  </div>
</div>

<!-- Edit Line Item Form -->
<div id="line_item_form" class="modal fade bd-example-modal-lg" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-body">
        <h1>Line Item for {{order_in.supplier.name}} order {{order_in.order_number}}</h1>
        <table>
        <tr>
            <td>Accounting Category</td>
            <td>
                <select v-model="order_in_line.book_keeping_category_id"  v-on:change="category_changed()">
                    <option v-for="(category, index) in categories" v-bind:value="category.id">{{category.name}}</option>
                </select>
            </td>
        </tr>
        <tr>
            <td v-if="is_part()">Part</td>
            <td v-if="is_part()">
                <select v-model="order_in_line.part_id">
                    <option v-for="(p, index) in parts" v-bind:value="p.id">{{p.name}}</option>
                </select>
            </td>
            <td v-if="! is_part()"><input v-model="order_in_line.description" type="text" value="" class="form-control" placeholder="Description"/></td>
            <td v-if="! is_part()"><input v-model="order_in_line.order_code" type="text" value="" class="form-control" placeholder="Order Code"/></td>
        </tr>
        <tr>
            <td><input v-model="order_in_line.qty" type="text" value="" class="form-control" placeholder="Qty"/></td>
            <td><input v-model="order_in_line.price" type="text" value="" class="form-control" placeholder="Price"/></td>
        </tr>
        <tr>
            <td>Cost Centre</td>
            <td>
              <select v-model="order_in_line.cost_centre_id">
                <option v-for="(cc, index) in cost_centres" v-bind:value="cc.id">{{cc.name}}</option>
              </select>
            </td>
        </tr>
        <tr><td><button type="button" :disabled="!line_item_valid()" v-on:click="save_line_item('#line_item_form')" class="btn btn-primary">Save</button>
            <button type="button" v-on:click="cancel('#line_item_form')" class="btn btn-primary">Cancel</button></td></tr>
    </table>
      </div>
    </div>
  </div>
</div>


<!-- Update Part Price Form -->
<div id="update_price_form" class="modal fade bd-example-modal-lg" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-body">
        <h1>Change Price of Part: {{order_in_line.part_name}}</h1>
        <h2>Price History</h2>
        <table>
          <tr><td>Current Price</td><th>{{to_gbp(order_in_line.purchase_cost_today)}}</th></tr>
          <tr><th>Date</th><th>Supplier</th><th>Unit Price</th></tr>
          <tr v-for="(purchase, index) in order_in_line.purchase_history">
              <td>{{purchase.date}}</td>
              <td>{{purchase.supplier}}</td>
              <td>{{purchase.price.to_currency(purchase.currency)}}</td>
          </tr>
          <tr>
          <td>Change Part Price to</td>
          <td><input v-model="new_part_price" type="text" value="" class="form-control" placeholder=""/></td>
          <td>
          <select v-model="new_part_currency">
              <option selected="yes">GBP</option>
              <option>USD</option>
              <option>EUR</option>
          </select>
          </td>
        </tr>
          <tr><td>
            <button type="button" v-on:click="save_new_part_price('#update_price_form')" class="btn btn-primary">Save New Part Price</button>
            <button type="button" v-on:click="cancel('#update_price_form')" class="btn btn-info">Cancel</button>
          </td></tr>
        </table>
      </div>
    </div>
  </div>
</div>

<!-- Capture Invoice Form -->
<div id="capture_invoice_form" class="modal fade bd-example-modal-lg" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-body">
        <h2>Capture Invoice for order: {{order_in.order_number}} from: {{order_in.supplier_name}}</h2>
        <table>
          <tr>
            <td>Print as PDF the invoice into the INVOICES shared folder on the MM Server then Click <b>Import</b></td>
            <td><span :disabled="importing_message.length > 0" v-on:click="request_import_invoice()" class="badge badge-success">Import</span></td>
          </tr>
          <tr v-if="importing_message.length > 0"><td>{{importing_message}}</td></tr>
          <tr><td colspan="2">
            <iframe id="invoice_iframe" width="600" height="300" type="application/pdf" v-bind:src="'/purchasing_invoices/' + order_in.order_number + '.pdf?random=' + Date.now"></iframe>
          </td></tr>
          <tr><td>{{import_invoice_message}}</td></tr>
          <tr><td>
            <button v-if="importing_message.length == 0" type="button" v-on:click="cancel('#capture_invoice_form')" class="btn btn-info">Done</button>
          </td></tr>
        </table>
      </div>
    </div>
  </div>
</div>

<!-- Add to Stock Form -->
<div id="add_to_stock_form" class="modal fade bd-example-modal-lg" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-body">
        <h1>Add Items to Stock</h1>
        <table>
            <tr>
                <td>Item</td>
                <td>{{order_in_line.part_name}} ({{order_in_line.part_qty}} in stock)</td>
            </tr>
            <tr>
                <td>Qty Ordered</td>
                <td>{{order_in_line.qty}}</td>
            </tr>
            <tr>
                <td>Qty Already Received</td>
                <td>{{order_in_line.qty_in}}</td>
            </tr>
            <tr>
                <td>Qty Outstanding</td>
                <td>{{order_in_line.qty - order_in_line.qty_in}}</td>
            </tr>
            <tr>
                <td>Number to Add to Stock</td>
                <td><input v-model="qty_to_add_to_stock" type="text" value="" class="form-control" placeholder=""/></td>
            </tr>
                <td>Date Received</td>
                <td><input v-model="order_in_line.date_line_received" type="date" value="" class="form-control" placeholder="Date the order was placed"/></td>
            </tr>
            <tr><td>
              <button type="button" v-on:click="save_update_stock('#add_to_stock_form')" class="btn btn-primary">Add to Stock</button>
              <button type="button" v-on:click="cancel('#add_to_stock_form')" class="btn btn-info">Cancel</button>
            </td></tr>
        </table>
      </div>
    </div>
  </div>
</div>

<!-- Order In List Table -->
<table>
<tr>
  <th>Order Date</th>
  <th>Supplier</th>
  <th>Summary</th>
</tr>
<tr v-if="status.length > 0"><td>{{status}}</td></tr>
<tr v-for="(oi, index) in filtered_results">
    <td v-if="oi.placed_date">{{oi.placed_date}}</td>
    <td v-else>Not ordered yet</td>
    <td>{{oi.supplier_name}}</td>
    <td>{{oi.summary}}</td>
    <td><img v-if="oi.has_proof_uploaded" src="/images/attachment.png/" v-on:click="open_capture_invoice(index)"></td>
    <td><span v-on:click="edit_new_order_in(index)" class="badge badge-success">Order Details</span></td>
    <td><span v-on:click="edit_line_items(index)" class="badge badge-success">Line Items</span></td>
    <td><span v-on:click="delete_order_in(index)" class="badge badge-danger">Delete</span></td>
    <td>{{oi.notes}}</td>
</tr>
</table>


</div>

<script>


window.onload = function () {
    var app = new Vue({
        el: '#app',
        data: {
          filter_by_type: 'is_not_ordered',
          num_days: 90,
          sort_by_field: 'updated_at',
          order_ins: [],
          order_in: { id: null, supplier_id: null, supplier: {parts: []}, order_in_lines: [], supplier_name: null, order_number: null, placed_date: null, is_service: false },
          suppliers: [],
          order_in_line: {id: null, part_id: null, book_keeping_category_id: 1, cost_centre_id: 1, part: {name: null, cost: 0, purchase_cost_today: 0}, name: '', price: null, qty: null, qty_in: null, part: {name: null, qty: null, price: null}},
          parts: [],
          accounts: [],
          categories: [],
          cost_centres: [],
          new_part_currency: 'GBP',
          new_part_price: null,
          qty_to_add_to_stock: null,
          invoice_url: null,
          import_invoice_message: '-',
          status: '',
          importing_message: ''
        },
        mounted: function() {
          var that;
          that = this;
          
          this.load_order_ins(0);
          this.load_suppliers();
          this.load_accounts();
          this.load_categories();
          this.load_cost_centres();
        },
        methods: {
          load_order_ins: function(days, callback) { 
            var that;
            that = this;
            this.status = 'LOADING ....';
            if (days == 0) { // load at least 30 days worth
              if (this.num_days > 30) {
                days = this.num_days;
              }
              else {
                days = 30;
              } 
            }
            $.ajax({
              url: '/order_ins/get_orders_json?days=' + days,
              success: function(res) {
                that.status = '';
                that.order_ins = res;
                if (callback) {
                  callback()
                }
              }
            });
          },
          filter_order_ins: function(filter_attribute) {
            this.filter_by_type = filter_attribute;
          },
          num_days_changed: function() {
            if (this.num_days > 90) {
              this.load_order_ins(this.num_days);
            }
          },
          category_changed: function() {
            if (this.order_in_line.book_keeping_category_id == 1) {
              // id 1  means Part
              this.order_in_line.cost_centre_id = 1;
            }
          },
          load_suppliers: function() {
            var that;
            that = this;
            $.ajax({
              url: '/suppliers/suppliers_list',
              success: function(res) {
                that.suppliers = res;
              }
            });
          },
          load_accounts: function() {
            var that;
            that = this;
            $.ajax({
              url: '/accounts.json',
              success: function(res) {
                that.accounts = res;
              }
            });
          },
          load_categories: function() {
            var that;
            that = this;
            $.ajax({
              url: '/book_keeping_categories.json',
              success: function(res) {
                that.categories = res;
              }
            });
          },
          load_cost_centres: function() {
            var that;
            that = this;
            $.ajax({
              url: '/cost_centres.json',
              success: function(res) {
                that.cost_centres = res;
              }
            });
          },
          delete_order_in: function(index) {
            if (confirm("Are you sure?")) {
              var that;
              that = this;
              let id = this.filtered_results[index].id;
              $.ajax({
                url: '/order_ins/delete_json?id=' + id,
                success: function(res) {
                  that.load_order_ins(this.num_days);
                }
              });
            }
          },
          save_order_in_line: function(modal) {
            this.save_line_item(modal);
          },
          save_new_part_price: function(modal_to_close) {
            var that;
            that = this;
            var modal = modal_to_close;
            $.ajax({
              type: 'POST',
              url: '/order_ins/set_new_part_price_json',
              data: {
                part_id: this.order_in_line.part.id,
                part_price: this.new_part_price,
                part_currency: this.new_part_currency,
                order_id: this.order_in.id
              },
              success: function(res) {
                that.order_in = res;
                if (modal) {
                  $(modal).modal('hide');
                }
              }
            });
          },
          save_update_stock: function(modal_to_close) {
            var that;
            that = this;
            var modal = modal_to_close;
            $.ajax({
              type: 'POST',
              url: '/order_ins/rx_part_json',
              data: {
                order_in_line_id: this.order_in_line.id,
                order_in_id: this.order_in.id,
                qty_in: this.qty_to_add_to_stock,
                date_line_received: this.order_in_line.date_line_received
              },
              success: function(res) {
                that.order_in = res;
                if (modal) {
                  $(modal).modal('hide');
                }
              }
            });
          },
          save_non_part_received: function(index) {
            if (confirm("Mark this line item as received?")) {
              var that;
              that = this;
              this.order_in_line = this.order_in.order_in_lines[index];
              $.ajax({
                type: 'POST',
                url: '/order_ins/rx_non_part_json',
                data: {
                  order_in_line_id: this.order_in_line.id,
                  order_in_id: this.order_in.id,
                },
                success: function(res) {
                  that.order_in = res;
                },
              });
            }
          },
          save_and_next: function(modal_to_close) {
            var that = this;
            this.save_order_in(modal_to_close, function() { 
              that.parts = that.order_in.supplier.parts;
              $('#line_items_form').modal('show'); });
          },
          save_order_in: function(modal_to_close, callback) {
            var that;
            that = this;
            var modal = modal_to_close;
            // delete computed attributes that cant be saved
            delete this.order_in.supplier;
            delete this.order_in.order_number;
            delete this.order_in.summary;
            delete this.order_in.is_not_ordered;
            delete this.order_in.is_ordered_not_received;
            delete this.order_in.is_received;
            delete this.order_in.total_invoice_amount;
            delete this.order_in.order_in_lines;
            delete this.order_in.parts;

            url = '/order_ins/create_order_in.json'
            if (this.order_in.id) { // update existing
              url = '/order_ins/update_order_in.json?id=' + this.order_in.id;
            }
            $.ajax({
              type: 'POST',
              url: url,
              data: {order_in: this.order_in},
              success: function(res) {
                that.load_order_ins(0); // 0 for default of 90 days
                that.order_in = res;
                if (modal) {
                  //$(modal).modal('hide');
                }
                if (callback) {
                  //alert("calling back)")
                  callback();
                }
              }
            });
          },
          open_unordered_form: function() {
            this.order_in = {
                id: null, open: null, created_at: null, updated_at: null,
                order_in_lines: [],
                currency: "GBP", date_qr_sent: null,
                exch_rate: null, invoice_goods_ammout: null,
                invoice_total_ammount: null, invoice_vat_ammout: 0,
                notes: "", placed_date: null, quotation_received: null,
                shipping: null, summary: "",
                supplier: {id: null, name: ""},
                supplier_id: null, supplier_name: null,
                vat_info_collected: "N/A", order_number: '',
                placed_date: today_as_string(),
                date_payment_made: today_as_string()
            };
            this.order_in_line = {id: null, part_id: null, part: {name: null, cost: 0, purchase_cost_today: 0}, name: '', price: null, qty: null, qty_in: null};
            this.parts = [];
            $('#unordered_form').modal('show');
          },
          open_capture_invoice: function(index) {
            if (index != null) {
              this.order_in = this.filtered_results[index];
            }
            $('#capture_invoice_form').modal('show');
          },
          request_import_invoice: function() {
            var that;
            that = this;
            this.importing_message = "Importing, Please Wait....";
            $.ajax({
              type: 'POST',
              url: '/order_ins/import_invoice',
              data: {
                order_number: this.order_in.order_number
              },
              complete: function(res) {
                that.import_invoice_message = res.responseText;
                document.getElementById('invoice_iframe').contentDocument.location.reload();
                that.importing_message = '';
              },
            });
          },
          cancel: function(modal_to_close) {
            $(modal_to_close).modal('hide');
          },
          edit_new_order_in: function(index) {
            this.order_in = this.filtered_results[index];
            $('#unordered_form').modal('show');
          },
          edit_line_items: function(index) {
            this.order_in = this.filtered_results[index];
            this.parts = this.order_in.supplier.parts;
            $('#line_items_form').modal('show');
          },
          edit_line_in: function(index) {
            this.order_in_line = this.order_in.order_in_lines[index];
            $('#line_item_form').modal('show');
          },
          add_line_in: function(index) {
            this.order_in_line = {id: null, book_keeping_category_id: null, cost_centre_id: null, description: '', order_code: '', part_id: null, part_id: null, price: null, qty: 1, qty_in: 0};
            $('#line_item_form').modal('show');
          },
          update_part_price: function(index) {
            this.order_in_line = this.order_in.order_in_lines[index];
            this.new_part_currency = this.order_in.currency;
            this.new_part_price = this.order_in_line.price;
            $('#update_price_form').modal('show');
          },
          add_to_stock: function(index) {
            this.order_in_line = this.order_in.order_in_lines[index];
            this.order_in_line.date_line_received = new Date().toISOString().slice(0,10);
            this.qty_to_add_to_stock = (this.order_in_line.qty - this.order_in_line.qty_in);
            $('#add_to_stock_form').modal('show');
          },
          save_line_item: function(modal_to_close) {
            // works for new and an edit
            var that;
            that = this;
            var modal = modal_to_close;
            this.order_in_line.order_in_id = this.order_in.id;
            var url = '/order_ins/add_part_json';
            if (this.order_in_line.id) {
              url = '/order_ins/edit_part_json';
            }
            $.ajax({
              type: 'GET',
              url: url,
              data: this.order_in_line,
              success: function(res) {
                that.order_in = res;
                that.load_order_ins(that.num_days);
                if (modal) {
                  $(modal).modal('hide');
                }
              }
            });
          },
          delete_line_item: function(index) {
            var that;
            that = this;
            var i = index;
            if (confirm("Are you sure?")) {
              $.ajax({
                type: 'GET',
                url: '/order_ins/delete_line_item?line_item_id=' + this.order_in.order_in_lines[index].id + "&order_in_id=" + this.order_in.id,
                success: function(res) {
                  that.order_in = res;
                  that.load_order_ins(that.num_days);
                }
              });
            }
          },
          line_item_valid: function() {
            if (! this.order_in_line) {
              return false;
            }
            if (! this.order_in_line.qty || this.order_in_line.qty < 1) {
              return false;
            }
            if (! this.order_in_line.price) {
              return false;
            }
            if (this.order_in_line.book_keeping_category_id == 1 && !this.order_in_line.part_id) {
                return false;
            }
            if (this.order_in_line.book_keeping_category_id != 1 && (!this.order_in_line.description || this.order_in_line.description.length < 3 )) {
                return false;
            }
            if (! this.order_in_line.cost_centre_id) {
              return false;
            }
            return true;
          },
          to_gbp: function(value) {
            if (value) {
              return value.to_gbp();
            }
            else {
              return "0";
            }
          },
          is_part: function() {
            return (this.order_in_line.book_keeping_category_id == 1); // better to use code == PAR
          },
          open_in_new_tab: function(url) {
            var win = window.open(url, '_blank');
            win.focus();
          }
        },
        computed: {
          filtered_results: function() {
            var that;
            that = this;
            let filtered = this.order_ins.filter(function (order_in) {
              var today = new Date();
              var start_date = today.addDays(- parseInt(that.num_days)).toISOString()
              var in_date_range = (order_in.updated_at >= start_date)
              return order_in[that.filter_by_type] && in_date_range
            });
            let sorted = filtered.sort(function (a, b) {
              let inverted = 1;
              if (that.sort_by_field == 'updated_at') {
                inverted = -1;
              }
              if (a[that.sort_by_field] > b[that.sort_by_field]) {
                return 1 * inverted;
              }
              return -1 * inverted;
            });
            return sorted;
          }
        }
    })
}

</script>


