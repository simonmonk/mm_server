<style>

.NEUTRAL {
  color: black;
}

.MONEY_IN {
  color: green;
}

.MONEY_OUT {
  color: red;
}

</style>



<h1>Bookkeeping</h1>

<div id="app">

<!-- Time selection and loading form -->
<div>
<span>
<form class="form-inline my-2 my-lg-0">
<span>From Date: </span><input v-model="from_date" type="date" value="" class="form-control" placeholder="First day of period"/>
<span>To Date: </span><input v-model="to_date" type="date" value="" class="form-control" placeholder="Last day of period"/>
<button :disabled="! dates_valid()" type="button" v-on:click="load_transactions()" class="btn btn-info">Load</button> <span>{{status}}</span>
</form>
</span>
</div>


<div>
<form class="form-inline my-2 my-lg-0">
  <span>Show Transactions for Account: </span>
  <select v-model="filter_by_account">
    <option v-for="(account, index) in accounts" v-bind:value="account">{{account.name}}</option>
  </select>
  <span>Show: </span>
  <input type="checkbox" v-model="show_purchases">Purchases</input>
  <input type="checkbox" v-model="show_sales">Sales</input>
  <input type="checkbox" v-model="show_adjustments">Ajustments</input>
  <input type="checkbox" v-model="show_expenses">Expenses</input>
</form>
</div>

<div>
<button :disabled="transactions.length == 0" type="button" v-on:click="open_adjustment_form_new()" class="badge badge-info">Add New Adjustment</button>
<button :disabled="transactions.length == 0" type="button" v-on:click="open_expense_form_new()" class="badge badge-info">Add New Expense</button>
</div>

<div v-if="filter_by_account.id != 0">
<span>Opening Balance</span>
<input v-model="filter_by_account.balance" type="text" class="form-control" placeholder="Opening balance"/>
</div>


<!-- Edit Adjustment Form  -->
<div id="edit_adjustment_form" class="modal fade bd-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-body">
        <h1>Adjustment {{adjustment.name}}</h1>
        <table>
          <tr>
            <td>Date</td>
            <td><input v-model="adjustment.adjustment_date" type="date" value="" class="form-control" placeholder="Date of adjustment"/></td>
          </tr>
          <tr>
            <td>Adjustment Type</td>
            <td>
              <select v-model="adjustment.adjustment_type_id">
                <option v-for="(adjustment_type, index) in adjustment_types" v-bind:value="adjustment_type.id">{{adjustment_type.name}}</option>
              </select>
            </td>
          </tr>
          <tr v-if="adjustment.adjustment_type_id != 3">
            <td>Account</td>
            <td>
              <select v-model="adjustment.from_account_id">
                <option v-for="(account, index) in accounts" v-bind:value="account.id">{{account.name}}</option>
              </select>
            </td>
          </tr>
          <tr v-if="adjustment.adjustment_type_id == 3">
            <td>From Account</td>
            <td>
              <select v-model="adjustment.from_account_id">
                <option v-for="(account, index) in accounts" v-bind:value="account.id">{{account.name}}</option>
              </select>
            </td>
          </tr>
          <tr v-if="adjustment.adjustment_type_id == 3">
            <td>To Account</td>
            <td>
              <select v-model="adjustment.to_account_id">
                <option v-for="(account, index) in accounts" v-bind:value="account.id">{{account.name}}</option>
              </select>
            </td>
          </tr>
          <tr>
            <td>Amount (+ for money in)</td>
            <td><input v-model="adjustment.value" type="text" value="" class="form-control" placeholder=""/></td>
          </tr>
          <tr v-if="[1, 2, 4, 5, 6, 8, 9].includes(adjustment.adjustment_type_id)">
            <td>VAT Amount</td>
            <td><input v-model="adjustment.vat_value" type="text" value="" class="form-control" placeholder=""/></td>
          </tr>
          <tr v-if="adjustment.adjustment_type_id == 3 && adjustment.from_account_id == adjustment.to_account_id">
            <td colspan="2"><span class="warning">From and to accounts must be different</td>
          </tr>
          <tr>
            <td>Description</td>
            <td><input v-model="adjustment.description" type="text" value="" class="form-control" placeholder=""/></td>
          </tr>
          <tr><td>
            <button type="button" v-on:click="cancel('#edit_adjustment_form')" class="btn btn-info">Cancel</button>
            <button type="button" v-on:click="save_adjustment('#edit_adjustment_form')" class="btn btn-success">Save</button>
          </td></tr>
        </table>
      </div>
    </div>
  </div>
</div>


<!-- Edit Expense Form -->
<div id="edit_expense_form" class="modal fade bd-example-modal-lg" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-body">
        <h1>Expense Details</h1>
        <table>
            <tr>
              <td>Person incuring expense</td>
              <td>
                  <select v-model="expense.user_id">
                      <option v-for="(user, index) in users" v-bind:value="user.id">{{user.name}}</option>
                  </select>
              </td>
            </tr>
            <tr>
              <td>Incurred Date</td>
              <td><input v-model="expense.incurred_date" type="date" value="" class="form-control" placeholder="Date expense incurred"/></td>
            </tr>
            <tr>
              <td>Reimbursed/Paid Date</td>
              <td><input v-model="expense.reimbursed_date" type="date" value="" class="form-control" placeholder="Date expense incurred"/></td>
            </tr>
            <tr>
              <td>Account (to reimburse or used for payment)</td>
              <td>
                  <select v-model="expense.account_id">
                      <option v-for="(account, index) in accounts" v-bind:value="account.id">{{account.name}}</option>
                  </select>
              </td>
            </tr>
            <tr>
              <td>Cost Centre</td>
              <td>
                <select v-model="expense.cost_centre_id">
                    <option v-for="(cost_centre, index) in cost_centres" v-bind:value="cost_centre.id">{{cost_centre.name}}</option>
                </select>
              </td>
            </tr>
            <tr>
              <td>Description</td>
              <td><input v-model="expense.description" type="text" value="" class="form-control" placeholder="* Enter description here"/></td>
            </tr>
            <tr>
              <td>Mileage</td>
              <td><input type="checkbox" v-model="expense.is_mileage"></td>
            </tr>
            <tr v-if="expense.is_mileage">
              <td>Miles</td>
              <td><input v-model="expense.miles" v-on:keyup="calc_miles()" type="text" value="" class="form-control" placeholder=""/></td>
            </tr>
            <tr v-if="expense.is_mileage">
              <td>Mileage Rate (p/mile)</td>
              <td><input v-model="expense.mileage_rate" v-on:keyup="calc_miles()" type="text" value="45" class="form-control" placeholder=""/></td>
            </tr>
            <tr v-if="!expense.is_mileage">
              <td>Supplier</td>
              <td><input v-model="expense.supplier" type="text" value="" class="form-control" placeholder=""/></td>
            </tr>
            <tr v-if="!expense.is_mileage">
              <td>Amount before VAT (£)</td>
              <td><input v-model="expense.without_vat" type="text" value="" class="form-control" placeholder=""/></td>
            </tr>
            <tr v-if="!expense.is_mileage">
              <td>VAT Amount (£)</td>
              <td><input v-model="expense.vat" type="text" value="" class="form-control" placeholder=""/></td>
            </tr>
            <tr>
              <td>Total Amount (£)</td>
              <td><input v-model="expense.with_vat" type="text" value="" class="form-control" placeholder=""/></td>
            </tr>
            <tr>
              <td v-if="!expense.is_mileage"><span v-on:click="show_attachment_expense()" class="badge badge-success">View/Add Receipt PDF</span></td>
              <td colspan="2" v-else><span class="warning">Mileage expenses do not have receipts.</span></td>
            </tr>
            <tr>
              <td><button type="button" :disabled="!expense_valid()" v-on:click="save_expense('#edit_expense_form')" class="btn btn-primary">Save</button></td>
            </tr>
        </table>
      </div>
    </div>
  </div>
</div>

//todo - add in attachements to expenses - and OCR values??

<!-- Edit Purchase Form -->
<div id="edit_purchase_form" class="modal fade bd-example-modal-lg" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-body">
        <h1>Purchase</h1>
        <table>
            <tr>
              <td>Order from</td>
              <td v-if="order_in.supplier_name">{{ order_in.supplier_name}} </td>
            </tr>
            <tr>
              <td>Order Number</td>
              <td>{{order_in.order_number}}</td>
            </tr>
            <tr>
              <td>Order Summary</td>
              <td>{{order_in.summary}}</td>
            </tr>
            <tr>
                <td>Account</td>
                <td>
                    <select v-model="order_in.account_id">
                      <option v-for="(account, index) in accounts" v-bind:value="account.id">{{account.name}}</option>
                    </select>
                </td>
            </tr>
            <tr>
                <td>Currency</td>
                <td>
                    <select v-model="order_in.currency">
                        <option>GBP</option>
                        <option>USD</option>
                        <option>EUR</option>
                    </select>
                </td>
            </tr>
            <tr>
                <td>Ordered Date</td>
                <td><input v-model="order_in.placed_date" type="date" value="" class="form-control" placeholder="Date the order was placed"/></td>
            </tr>
            <tr>    
                <td>Paid Date</td>
                <td><input v-model="order_in.date_payment_made" type="date" value="" class="form-control" placeholder="Date the order was placed"/></td>
            </tr>
            <tr v-if="this.order_in.currency != 'GBP'">
                <td>Exchange rate (E.g. 1.3)</td>
                <td><input v-model="order_in.exch_rate" type="text" value="" class="form-control" placeholder=""/></td>
            </tr>
            <tr>
                <td>Invoice Goods Amount</td>
                <td><input v-model="order_in.invoice_goods_ammout" type="text" value="" class="form-control" placeholder=""/></td>
            </tr>
            <tr>
                <td>Invoice VAT Amount</td>
                <td><input v-model="order_in.invoice_vat_ammout" type="text" value="" class="form-control" placeholder=""/></td>
            <tr>
                <td>Shipping Amount</td>
                <td><input v-model="order_in.shipping" type="text" value="" class="form-control" placeholder=""/></td>
            </tr>
            <tr>
                <td>Invoice Total Amount</td>
                <td><input v-model="order_in.invoice_total_ammount" type="text" value="" class="form-control" placeholder=""/></td>
            </tr>
            <tr>
                <td v-if="order_in.id && order_in.id > 0"><span v-on:click="show_attachment_purchase()" class="badge badge-success">View/Add Invoice PDF</span></td>
                <td colspan="2"v-else><span class="warning">You can't upload an invoice until you have saved this order.</span></td>
            </tr>
            <tr v-if="this.order_in.currency != 'GBP'">
                <td>Amount actually paid in £</td>
                <td><input v-model="order_in.actually_paid_gbp" type="text" value="" class="form-control" placeholder=""/></td>
            </tr>
            <tr>
              <td>Is a Service (and so NOY in box 9)</td>
              <td><input v-model="order_in.is_service" type="checkbox" value="" class="form-control" placeholder=""/></td>
            </tr>
            <tr>
                <td>VAT Information Collected (N/A, Y, N)</td>
                <td><input v-model="order_in.vat_info_collected" type="text" value="" class="form-control" placeholder=""/></td>
            </tr>
            <tr>
                <td colspan="2"><textarea v-model="order_in.notes" rows="3" class="form-control" placeholder="Notes about this order go here"></textarea></td>
            </tr>
            <tr><td><button type="button" :disabled="! this.order_in.supplier_id || !this.order_in.account_id" v-on:click="save_order_in('#edit_purchase_form')" class="btn btn-primary">Save</button>
              <button type="button" v-on:click="cancel('#edit_purchase_form')" class="btn btn-info">Cancel</button></td>
            </tr>
        </table>
      </div>
    </div>
  </div>
</div>



<!-- Capture Invoice Form - Goods In -->
<div id="capture_invoice_form" class="modal fade bd-example-modal-lg" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-body">
        <h2>Invoice Attachment</h2>
        <table>
          <tr>
            <td>Print as PDF the invoice into the INVOICES shared folder on the MM Server then Click <b>Import</b></td>
            <td><span :disabled="importing_message.length > 0" v-on:click="request_import_invoice()" class="badge badge-success">Import</span></td>
          </tr>
          <tr v-if="importing_message.length > 0"><td>{{importing_message}}</td></tr>
          <tr><td colspan="2">
            <iframe id="invoice_iframe" width="600" height="300" type="application/pdf" v-bind:src="'/purchasing_invoices/' + order_in.order_number + '.pdf?random=' + Date.now"></iframe>
          </td></tr>
          <tr><td>{{import_invoice_message}}</td></tr>
          <tr><td>
            <button type="button" v-if="importing_message.length == 0" v-on:click="cancel('#capture_invoice_form')" class="btn btn-info">Done</button>
          </td></tr>
        </table>
      </div>
    </div>
  </div>
</div>


<!-- Capture Receipt Form - Goods In -->
<div id="capture_receipt_form" class="modal fade bd-example-modal-lg" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-body">
        <h2>Receipt Attachment</h2>
        <table>
          <tr>
            <td>Print as PDF the receipt into the shared folder on the MM Server then Click <b>Import</b></td>
            <td><span :disabled="importing_message.length > 0" v-on:click="request_import_receipt()" class="badge badge-success">Import</span></td>
          </tr>
          <tr v-if="importing_message.length > 0"><td>{{importing_message}}</td></tr>
          <tr><td colspan="2">
            <iframe id="expense_iframe" width="600" height="300" type="application/pdf" v-bind:src="'/expense_receipts/' + expense.expense_number + '.pdf?random=' + Date.now"></iframe>
          </td></tr>
          <tr><td>{{import_invoice_message}}</td></tr>
          <tr><td>
            <button type="button" v-if="importing_message.length == 0" v-on:click="cancel('#capture_receipt_form')" class="btn btn-info">Done</button>
          </td></tr>
        </table>
      </div>
    </div>
  </div>
</div>


<!-- Edit Shipment Form -->
<div id="edit_shipment_form" class="modal fade bd-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-body">
        <h1>Shipment {{shipment.invoice_number}} {{ shipment.retailer_name  }}</h1>
        <table>
          <tr>
            <td>Invoice Number</td>
            <td>{{shipment.invoice_number}}</td>
            <td>Order Received Date</td>
            <td>{{shipment.date_order_received}}</td>
          </tr>
          <tr>
            <td>VAT Rate (percent)</td>
            <td>{{shipment.vat_rate}}</td>
            <td>Invoice Sent Date</td>
            <td>{{shipment.date_invoice_sent}}</td>
          </tr>
          <tr>
            <td>Customer P.O. Number</td>
            <td>{{shipment.po_reference}}</td>
            <td>Despatched Date</td>
            <td>{{shipment.date_dispatched}}</td>
          </tr>
          <tr>
            <td>Customer Shipping Provider</td>
            <td>{{shipment.shipping_provider}}</td>
            <td>Date Paid</td>
            <td>{{shipment.date_payment_received}}</td>
          </tr>
          <tr>
            <td>Customer Shipping Ac.</td>
            <td>{{shipment.shipping_provider_ac_no}}</td>
            <td>Actual Amount Collected £</td>
            <td><input v-model="shipment.total_invoice_collected" type="text" class="form-control" placeholder="none"/></td>
          </tr>
          <tr>
            <td>Discount</td>
            <td>{{shipment.discount}}</td>
            <td>Account</td>
            <td>
              <select v-model="shipment.account_id">
                <option v-for="(account, index) in accounts" v-bind:value="account.id">{{account.name}}</option>
              </select>
            </td>
          </tr>
          <tr>
            <td>Weight (kg)</td>
            <td>{{shipment.weight_kg}}</td>
          </tr>
          <tr>
            <td>Dimensions (cm)</td>
            <td>{{shipment.width_cm}} x  {{shipment.height_cm}} x {{shipment.depth_cm}}</td>
          </tr>
          <tr>
            <td>Notes</td>
            <td colspan="3"><textarea v-model="shipment.notes" rows="3" class="form-control" placeholder="Notes about this shipment go here"></textarea></td>
          </tr>
          <tr>
            <td>Invoice Comment</td>
            <td colspan="3">{{shipment.invoice_comment}}</td>
          </tr>
          <tr>
            <td>Payment Received</td>
            <td><input v-model="shipment.date_payment_received" type="date" value="" class="form-control" placeholder="Date payment received"/></td>
          </tr>
          <tr><td><span v-on:click="create_invoice(1)" class="badge badge-info">Invoice</span></td></tr>
          <tr><td><button type="button" v-on:click="save_shipment('#edit_shipment_form')" class="btn btn-primary">Save</button>
            <button type="button" v-on:click="cancel('#edit_shipment_form')" class="btn btn-info">Cancel</button></td></tr>
        </table>
      </div>
    </div>
  </div>
</div>

<!-- Show Shipment Invoice Form -->
<div id="show_shipment_invoice_form" class="modal fade bd-example-modal-lg" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-body">
        <h2>Shipment Invoice</h2>
        <table>
          <tr><td colspan="2">
            <iframe id="shipment_iframe" width="600" height="300" type="application/pdf" v-bind:src="'/shipments/invoice/'+shipment.invoice_number+ '?id=' + shipment.id+ '&pages=1'"></iframe>
          </td></tr>
          <tr><td>
            <button type="button" v-on:click="cancel('#show_shipment_invoice_form')" class="btn btn-info">Done</button>
          </td></tr>
        </table>
      </div>
    </div>
  </div>
</div>






<!-- Transactions Table -->
<table>
<tr>
    <th>Date</th>
    <th>Description</th>
    <th>Accounts</th>
    <th>Without VAT</th>
    <th>VAT</th>
    <th>Total</th>
    <th>VAT Action</th>
</tr>
<tr v-for="(transaction, index) in filtered_results">
  <td>{{transaction.accounting_date}}</td>
  <td>{{transaction.transaction_summary}}</td>
  <td>{{transaction.accounts}}</td>
  <td v-bind:class="transaction.direction" >{{transaction.without_vat}}</td>
  <td v-bind:class="transaction.direction" >{{transaction.vat}}</td>
  <td v-bind:class="transaction.direction" >{{transaction.with_vat}}</td>
  <td>{{transaction.vat_action}}</td>
  <td v-if="transaction.has_proof_uploaded && transaction.transaction_type == 'ORDER_IN'"><img src="/images/attachment.png/" v-on:click="show_attachment_purchase(index)"></td>
  <td v-if="transaction.has_proof_uploaded && transaction.transaction_type == 'EXPENSE'"><img src="/images/attachment.png/" v-on:click="show_attachment_expense(index)"></td>
  <td v-if="transaction.transaction_type == 'SHIPMENT'"><img src="/images/attachment.png/" v-on:click="show_attachment_shipment(index)"></td>
  <td v-if="! transaction.has_proof_uploaded"></td>
  <td><span v-on:click="edit_transaction(index)" class="badge badge-success">Edit</span></td>
  <td><span v-on:click="delete_transaction(index)" class="badge badge-danger">Delete</span></td>
</tr>
</table>


</div>



<script>
window.onload = function () {
    var app = new Vue({
        el: '#app',
        data: {
            from_date: null,
            to_date: null,
            transactions: [],
            accounts: [],
            categories: [],
            cost_centres: [],
            users: [],
            status: '',
            import_invoice_message: '',
            importing_message: '',
            filter_by_account: null,
            show_purchases: true,
            show_sales: true,
            show_adjustments: true,
            show_expenses: true,
            adjustment_types: [],
            adjustment: { // todo may only need the id if so delete the rest
              id: null, name: '', adjustment_type_id: null, organisation: null, description: '', 
              value: 0, vat_value: 0, vat_action: '', tax_region: null, is_checked: false,
              from_account_id: null, to_account_id: null},
            expense: {id: null},
            order_in: {id: null},
            shipment: {id: null},
        },
        mounted: function() {
          var that;
          that = this;
          this.load_accounts();
          this.load_adjustment_types();
          this.load_users();
          this.load_cost_centres();
          this.load_categories();
          this.from_date = new Date().addDays(-30).toISOString().slice(0,10)
          this.to_date = today_as_string()
        },
        methods: {
          load_transactions: function() { 
            this.status = 'Loading...'
            var that;
            that = this;
            $.ajax({
              url: '/bookkeepings/transactions?from_date=' + this.from_date + '&to_date=' + this.to_date,
              success: function(res) {
                that.status = "Loaded " + res.length + " transactions";
                that.transactions = res;
              }
            });
          },
          load_accounts: function() {
            var that;
            that = this;
            $.ajax({
              url: '/accounts.json',
              success: function(res) {
                that.accounts = res;
                that.accounts.unshift({id: 0, name: 'ALL'});
                that.filter_by_account = that.accounts[0];
              }
            });
          },
          load_adjustment_types: function() {
            var that;
            that = this;
            $.ajax({
              url: '/adjustment_types.json',
              success: function(res) {
                that.adjustment_types = res;
              }
            });
          },
          load_users: function() {
            var that;
            that = this;
            $.ajax({
              url: 'users.json',
              success: function(res) {
                that.users = res;
              }
            });
          },
          load_categories: function() {
            var that;
            that = this;
            $.ajax({
              url: '/book_keeping_categories.json',
              success: function(res) {
                that.categories = res;
              }
            });
          },
          load_cost_centres: function() {
            var that;
            that = this;
            $.ajax({
              url: '/cost_centres.json',
              success: function(res) {
                that.cost_centres = res;
              }
            });
          },
          save_adjustment: function(modal_to_close) {
            // save an edited PUT adjustment or create a new on on db POST
            var that;
            that = this;
            var modal = modal_to_close;
            var method = "POST";
            var url = "/adjustments.json";
            if (this.adjustment.id) {
              method = "PUT";
              url = "/adjustments/" + this.adjustment.id + ".json";
            }
            $.ajax({
              type: method,
              url: url,
              data: {adjustment: this.adjustment},
              success: function(res) {
                if (modal) {
                  $(modal).modal('hide');
                }
                that.adjustment = res; 
                that.load_transactions();
              }
            });
          },
          open_expense_form_new: function() {
            this.expense = { account_id: 1, account_ids: [1],
            cost_centre_id: 4, description: "", id: null, incurred_date: today_as_string(),
            is_mileage: false, mileage_rate: 50, miles: 0, reimbursed_date: null, supplier: "",
            user_id: null, vat: null, with_vat: null, without_vat: null };
            $('#edit_expense_form').modal('show')
          },
          save_expense: function(modal_to_close, callback) {
            var that;
            that = this;
            var modal = modal_to_close;
            url = '/expenses.json'
            meth = 'POST'
            if (this.expense.id) { // update existing
              url = '/expenses/' + this.expense.id + '.json';
              meth = 'PUT'
            }
            $.ajax({
              type: meth,
              url: url,
              data: {expense: this.expense},
              success: function(res) {
                that.expense = res;
                that.load_transactions();
                if (modal) {
                  $(modal).modal('hide');
                }
                if (callback) {
                  callback();
                }
              }
            });
          },
          show_attachment_purchase: function(index) {
            if (index != null) {
              this.order_in = this.filtered_results[index];
            }
            $('#capture_invoice_form').modal('show');
          },
          show_attachment_shipment: function(index) {
            if (index != null) {
              this.shipment = this.filtered_results[index];
            }
            $('#show_shipment_invoice_form').modal('show');
          },
          show_attachment_expense: function(index) {
            if (index != null) {
              this.expense = this.filtered_results[index];
            }
            $('#capture_receipt_form').modal('show');
          },
          request_import_invoice: function() {
            var that;
            that = this;
            this.importing_message = "Importing, Please Wait....";
            $.ajax({
              type: 'POST',
              url: '/order_ins/import_invoice',
              data: {
                order_number: this.order_in.order_number
              },
              complete: function(res) {
                that.import_invoice_message = res.responseText;
                document.getElementById('invoice_iframe').contentDocument.location.reload();
                that.importing_message = '';
              },
            });
          },


          request_import_receipt: function() {
            var that;
            that = this;
            this.importing_message = "Importing, Please Wait....";
            $.ajax({
              type: 'POST',
              url: '/expenses/import_receipt',
              data: {
                expense_number: this.expense.expense_number
              },
              complete: function(res) {
                that.import_invoice_message = res.responseText;
                document.getElementById('expense_iframe').contentDocument.location.reload();
                that.importing_message = '';
              },
            });
          },

        
          dates_valid: function() {
            return (this.from_date && this.to_date && this.from_date < this.to_date);
          },

          expense_valid: function() {
            if (! this.expense.user_id) return false;
            if (! this.expense.description || this.expense.description.length < 5) return false;
            if (! this.expense.incurred_date) return false;
            return true;
          },

          cancel: function(modal_to_close) {
            $(modal_to_close).modal('hide')
          },
          open_adjustment_form_new: function() {
            this.adjustment = { id: null, name: '', adjustment_date: today_as_string(),
              adjustment_type: null, organisation: null, description: '', 
              value: 0, vat_value: 0, vat_action: '', tax_region: null, is_checked: false,
              from_account_id: null, to_account_id: null}
            $('#edit_adjustment_form').modal('show')
          },
          edit_transaction: function(index) {
            var trans = this.filtered_results[index]
            if (trans.transaction_type == 'ADJUSTMENT') {
              this.adjustment = trans;
              $('#edit_adjustment_form').modal('show');
            }
            if (trans.transaction_type == 'EXPENSE') {
              this.expense = trans;
              $('#edit_expense_form').modal('show');
            }
            if (trans.transaction_type == 'ORDER_IN') {
              this.order_in = trans;
              $('#edit_purchase_form').modal('show');
            }
            if (trans.transaction_type == 'SHIPMENT') {
              this.shipment = trans;
              $('#edit_shipment_form').modal('show'); 
            }
          },

          delete_transaction: function(index) {
            var trans = this.filtered_results[index]
            if (trans.transaction_type == 'ADJUSTMENT') {
              this.delete_adjustment(trans.id);
            }
            if (trans.transaction_type == 'EXPENSE') {
              this.delete_expense(trans.id);
            }
            if (trans.transaction_type == 'ORDER_IN') {
              this.delete_order_in(trans.id);
            }
            if (trans.transaction_type == 'SHIPMENT') {
              alert("nope. Not a good idea.");
            }
          },

          create_invoice: function(pages) {
            window.open("/shipments/invoice/" + this.shipment.invoice_number + "?id=" + this.shipment.id + "&pages=" + pages, '_blank')
          },
          save_shipment: function(modal_to_close) {
            var that;
            that = this;
            var modal = modal_to_close;
            // delete computed attributes that cant be saved
            delete this.shipment.retailer_name;
            delete this.shipment.total_invoice_amount;
            delete this.shipment.is_amazon;
            delete this.shipment.is_new;
            delete this.shipment.is_unpaid;
            delete this.shipment.is_paid;
            delete this.shipment.is_overdue;
            delete this.shipment.shipment_products;
            // POST for a new, PUT for an update
            method = 'POST'
            url = '/shipments.json'
            
            if (this.shipment.id) { // update existing
              method = 'PUT';
              url = '/shipments/' + this.shipment.id + '.json';
            }
            $.ajax({
              type: method,
              url: url,
              data: {shipment: this.shipment},
              success: function(res) {
                that.load_transactions();
                if (modal) {
                  $(modal).modal('hide');
                }
              }
            });
          },
          save_order_in: function(modal_to_close) {
            var that;
            that = this;
            var modal = modal_to_close;
            // delete computed attributes that cant be saved
            delete this.order_in.supplier;
            delete this.order_in.order_number;
            delete this.order_in.summary;
            delete this.order_in.is_not_ordered;
            delete this.order_in.is_ordered_not_received;
            delete this.order_in.is_received;
            delete this.order_in.total_invoice_amount;
            delete this.order_in.order_in_lines;
            delete this.order_in.parts;
            url = '/order_ins/update_order_in.json?id=' + this.order_in.id;
            $.ajax({
              type: 'POST',
              url: url,
              data: {order_in: this.order_in},
              success: function(res) {
                that.load_transactions();
                that.order_in = res;
                if (modal) {
                  $(modal).modal('hide');
                }
              }
            });
          },

          delete_order_in: function(id) {
            if (confirm("Are you sure?")) {
              var that;
              that = this;
              $.ajax({
                url: '/order_ins/delete_json?id=' + id,
                success: function(res) {
                  that.load_transactions();
                }
              });
            }
          },

          delete_expense: function(id) {
            if (confirm("Are you sure?")) {
              var that;
              that = this;
              $.ajax({
                type: 'DELETE',
                url: '/expenses/' + id,
                success: function(res) {
                  that.load_transactions();
                }
              });
            }
          },

          delete_adjustment: function(id) {
            if (confirm("Are you sure?")) {
              var that;
              that = this;
              $.ajax({
                type: 'DELETE',
                url: '/adjustments/' + id,
                success: function(res) {
                  that.load_transactions();
                }
              });
            }
          },


          calc_miles: function() {
            if (this.expense.miles > 0 && this.expense.mileage_rate >0) {
              this.expense.with_vat = this.expense.miles * this.expense.mileage_rate / 100;
            }
          },
        },
        computed: {
          filtered_results: function() {
            var that;
            that = this;
            let filtered = this.transactions.filter(function (transaction) {
              if (transaction.account_ids.includes(that.filter_by_account.id) || that.filter_by_account.id == 0) {
                if (that.show_purchases && transaction.transaction_type == 'ORDER_IN') {return true;}
                if (that.show_sales && transaction.transaction_type == 'SHIPMENT') {return true;}
                if (that.show_adjustments && transaction.transaction_type == 'ADJUSTMENT') {return true;}
                if (that.show_expenses && transaction.transaction_type == 'EXPENSE') {return true;}
              return false;
              }
            });
            return filtered;
          }
        }
    })
}

</script>





